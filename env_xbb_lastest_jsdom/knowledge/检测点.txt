//WindowProperties 删除构造方法
delete WindowProperties.prototype.constructor;



//代理失效
var window_=this;  底下用window_

//两个都需要补
Object.getOwnPropertyDescriptors(Window)
Object.getOwnPropertyDescriptors(Window.prototype)

//location检测

//代理检测
// self=window;
// top=window
// window==self ; ///true
// window =new Proxy(window,{});
// window==self;//false

//需要连续赋值,可以过代理检测
// top=self=window=new Proxy(window,{})



//解决重复代理
bodavm.memory.symbolProxy=Symbol("proxy")  //独一无二的属性,标记是否代理
if (bodavm.memory.symbolProxy in obj){
    return obj
}
 //解决重复代理
Object.defineProperty(obj,bodavm.memory.symbolProxy,{
    configurable:false,
    enumerable:false,
    writable:false,
    value:true
})




//代理失效  ,代理的对象没有被代理上
console.log(document.createElement===document.createElement)




//实现Document.prototype.activeElement()调用报错
if(Object.getOwnPropertyDescriptor(obj,"constructor")!==undefined){
    if (Object.getOwnPropertyDescriptor(self,"constructor") !==undefined){
        return bodavm.toolsFunc.throwError("TypeError","Illegal invocation")
    }
}

//过滤bodavm.memory.symbolProxy与"eval"


//node环境和vm2环境中的监测点过滤
// 删除浏览器中不存在的对象
delete global;
delete GLOBAL;
delete VMError;
delete Buffer;
delete WindowProperties
delete process;
delete root;


//在原型对象上不能通过原型对象获取,不在自身上可以通过自身获取
a=document.createElement("div")
a.align=123
Object.getOwnPropertyDescriptors(a,'align')



//鼠标轨迹


//检测点
function test(){}
Object.getOwnPropertyDescriptor(window,'test')



//
var r={}
r.__proto__=document
r.location

var b={}
b=Screen.prototype
b.width
var b={}
b.__proto__=Screen.prototype
b.width


//document.all



//window.length   iframe



// JSON.stringify(console)



"FSSBBIl1UgzbN7N80T=4B.zKNh3jQsKMZLAyeqQs7QJwaZPeSafzY3KH2cdc0RyVUYgsIPrb_buCwzg59VBqHJbjQAXky9B_J5am_szA1nWrHhagAii3e0x52q2c0st02n4qjdiGKI_Q5W2b2xEaLujGn0notNXB0uevYFRYKwQ0R.naBqJsjWQK8SQD9HVg8kzNCXC0W1OLMLWFS4AGvo2i_BMtcTi.IyV2X5xsDcz9;"