// FontFace对象
FontFace = function FontFace(){let arg=arguments[0];
if (arg!='bobo' && !(this instanceof FontFace) ){return bodavm.toolsFunc.throwError("TypeError", "Failed to construct 'FontFace': 2 arguments required, but only 0 present.")};bodavm.toolsFunc.symbolProperty(this);
if (arg =='bobo'){console.log_copy('FontFace 实例化对象 --->',JSON.stringify_bo(arguments,function(k,v){if (v==window){return 'window'}else{return v}}))};}

bodavm.toolsFunc.safeProto(FontFace, "FontFace");
bodavm.toolsFunc.defineProperty(FontFace.prototype, "family", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(FontFace.prototype, "style", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(FontFace.prototype, "weight", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(FontFace.prototype, "stretch", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(FontFace.prototype, "unicodeRange", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(FontFace.prototype, "variant", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(FontFace.prototype, "featureSettings", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(FontFace.prototype, "display", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(FontFace.prototype, "ascentOverride", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(FontFace.prototype, "descentOverride", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(FontFace.prototype, "lineGapOverride", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(FontFace.prototype, "sizeAdjust", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(FontFace.prototype, "status", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(FontFace.prototype, "loaded", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(FontFace.prototype, "load", {configurable:true, enumerable:true, writable:true, value:function load (){return bodavm.toolsFunc.dispatch(this, FontFace.prototype, "FontFace", "load", arguments)}},);
