// GPUSupportedLimits对象
GPUSupportedLimits = function GPUSupportedLimits(){let arg=arguments[0];
if (arg!='bobo' && !(this instanceof GPUSupportedLimits) ){return bodavm.toolsFunc.throwError("TypeError", "Illegal constructor")};bodavm.toolsFunc.symbolProperty(this);
if (arg =='bobo'){console.log_copy('GPUSupportedLimits 实例化对象 --->',JSON.stringify_bo(arguments,function(k,v){if (v==window){return 'window'}else{return v}}))};}

bodavm.toolsFunc.safeProto(GPUSupportedLimits, "GPUSupportedLimits");
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxTextureDimension1D", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxTextureDimension2D", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxTextureDimension3D", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxTextureArrayLayers", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxBindGroups", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxBindingsPerBindGroup", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxDynamicUniformBuffersPerPipelineLayout", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxDynamicStorageBuffersPerPipelineLayout", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxSampledTexturesPerShaderStage", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxSamplersPerShaderStage", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxStorageBuffersPerShaderStage", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxStorageTexturesPerShaderStage", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxUniformBuffersPerShaderStage", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxUniformBufferBindingSize", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxStorageBufferBindingSize", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "minUniformBufferOffsetAlignment", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "minStorageBufferOffsetAlignment", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxVertexBuffers", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxBufferSize", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxVertexAttributes", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxVertexBufferArrayStride", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxInterStageShaderComponents", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxInterStageShaderVariables", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxColorAttachments", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxColorAttachmentBytesPerSample", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxComputeWorkgroupStorageSize", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxComputeInvocationsPerWorkgroup", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxComputeWorkgroupSizeX", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxComputeWorkgroupSizeY", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxComputeWorkgroupSizeZ", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(GPUSupportedLimits.prototype, "maxComputeWorkgroupsPerDimension", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, GPUSupportedLimits.prototype, "GPUSupportedLimits", "bodefault_get", arguments)}, set:undefined},);
