// HTMLTableCellElement对象
HTMLTableCellElement = function HTMLTableCellElement(){let arg=arguments[0];
if (arg!='bobo' && !(this instanceof HTMLTableCellElement) ){return bodavm.toolsFunc.throwError("TypeError", "Illegal constructor")};bodavm.toolsFunc.symbolProperty(this);
if (arg =='bobo'){console.log_copy('HTMLTableCellElement 实例化对象 --->',JSON.stringify_bo(arguments,function(k,v){if (v==window){return 'window'}else{return v}}))};}

bodavm.toolsFunc.safeProto(HTMLTableCellElement, "HTMLTableCellElement");
HTMLTableCellElement.prototype.__proto__=HTMLElement.prototype;
HTMLTableCellElement.__proto__=HTMLElement;
bodavm.toolsFunc.defineProperty(HTMLTableCellElement.prototype, "colSpan", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableCellElement.prototype, "rowSpan", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableCellElement.prototype, "headers", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableCellElement.prototype, "cellIndex", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLTableCellElement.prototype, "align", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableCellElement.prototype, "axis", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableCellElement.prototype, "height", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableCellElement.prototype, "width", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableCellElement.prototype, "ch", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableCellElement.prototype, "chOff", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableCellElement.prototype, "noWrap", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableCellElement.prototype, "vAlign", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableCellElement.prototype, "bgColor", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableCellElement.prototype, "abbr", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableCellElement.prototype, "scope", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableCellElement.prototype, "HTMLTableCellElement", "bodefault_set", arguments)}},);
