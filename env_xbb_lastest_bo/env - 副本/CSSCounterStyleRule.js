// CSSCounterStyleRule对象
CSSCounterStyleRule = function CSSCounterStyleRule(){let arg=arguments[0];
if (arg!='bobo' && !(this instanceof CSSCounterStyleRule) ){return bodavm.toolsFunc.throwError("TypeError", "Illegal constructor")};bodavm.toolsFunc.symbolProperty(this);
if (arg =='bobo'){console.log_copy('CSSCounterStyleRule 实例化对象 --->',JSON.stringify_bo(arguments,function(k,v){if (v==window){return 'window'}else{return v}}))};}

bodavm.toolsFunc.safeProto(CSSCounterStyleRule, "CSSCounterStyleRule");
CSSCounterStyleRule.prototype.__proto__=CSSRule.prototype;
CSSCounterStyleRule.__proto__=CSSRule;
bodavm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "name", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "system", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "symbols", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "additiveSymbols", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "negative", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "prefix", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "suffix", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "range", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "pad", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "speakAs", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(CSSCounterStyleRule.prototype, "fallback", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, CSSCounterStyleRule.prototype, "CSSCounterStyleRule", "bodefault_set", arguments)}},);
