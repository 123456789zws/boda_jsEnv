// HTMLTableElement对象
HTMLTableElement = function HTMLTableElement(){let arg=arguments[0];
if (arg!='bobo' && !(this instanceof HTMLTableElement) ){return bodavm.toolsFunc.throwError("TypeError", "Illegal constructor")};bodavm.toolsFunc.symbolProperty(this);
if (arg =='bobo'){console.log_copy('HTMLTableElement 实例化对象 --->',JSON.stringify_bo(arguments,function(k,v){if (v==window){return 'window'}else{return v}}))};}

bodavm.toolsFunc.safeProto(HTMLTableElement, "HTMLTableElement");
HTMLTableElement.prototype.__proto__=HTMLElement.prototype;
HTMLTableElement.__proto__=HTMLElement;
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "caption", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "tHead", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "tFoot", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "tBodies", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "rows", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "align", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "border", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "frame", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "rules", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "summary", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "width", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "bgColor", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "cellPadding", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "cellSpacing", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "createCaption", {configurable:true, enumerable:true, writable:true, value:function createCaption (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "createCaption", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "createTBody", {configurable:true, enumerable:true, writable:true, value:function createTBody (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "createTBody", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "createTFoot", {configurable:true, enumerable:true, writable:true, value:function createTFoot (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "createTFoot", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "createTHead", {configurable:true, enumerable:true, writable:true, value:function createTHead (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "createTHead", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "deleteCaption", {configurable:true, enumerable:true, writable:true, value:function deleteCaption (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "deleteCaption", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "deleteRow", {configurable:true, enumerable:true, writable:true, value:function deleteRow (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "deleteRow", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "deleteTFoot", {configurable:true, enumerable:true, writable:true, value:function deleteTFoot (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "deleteTFoot", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "deleteTHead", {configurable:true, enumerable:true, writable:true, value:function deleteTHead (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "deleteTHead", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLTableElement.prototype, "insertRow", {configurable:true, enumerable:true, writable:true, value:function insertRow (){return bodavm.toolsFunc.dispatch(this, HTMLTableElement.prototype, "HTMLTableElement", "insertRow", arguments)}},);
