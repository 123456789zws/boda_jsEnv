// HTMLMediaElement对象
HTMLMediaElement = function HTMLMediaElement(){let arg=arguments[0];
if (arg!='bobo' && !(this instanceof HTMLMediaElement) ){return bodavm.toolsFunc.throwError("TypeError", "Illegal constructor")};bodavm.toolsFunc.symbolProperty(this);
if (arg =='bobo'){console.log_copy('HTMLMediaElement 实例化对象 --->',JSON.stringify_bo(arguments,function(k,v){if (v==window){return 'window'}else{return v}}))};}

bodavm.toolsFunc.safeProto(HTMLMediaElement, "HTMLMediaElement");
HTMLMediaElement.prototype.__proto__=HTMLElement.prototype;
HTMLMediaElement.__proto__=HTMLElement;
bodavm.toolsFunc.defineProperty(HTMLMediaElement, "NETWORK_EMPTY", {configurable:false, enumerable:true, writable:false, value:0});
bodavm.toolsFunc.defineProperty(HTMLMediaElement, "NETWORK_IDLE", {configurable:false, enumerable:true, writable:false, value:1});
bodavm.toolsFunc.defineProperty(HTMLMediaElement, "NETWORK_LOADING", {configurable:false, enumerable:true, writable:false, value:2});
bodavm.toolsFunc.defineProperty(HTMLMediaElement, "NETWORK_NO_SOURCE", {configurable:false, enumerable:true, writable:false, value:3});
bodavm.toolsFunc.defineProperty(HTMLMediaElement, "HAVE_NOTHING", {configurable:false, enumerable:true, writable:false, value:0});
bodavm.toolsFunc.defineProperty(HTMLMediaElement, "HAVE_METADATA", {configurable:false, enumerable:true, writable:false, value:1});
bodavm.toolsFunc.defineProperty(HTMLMediaElement, "HAVE_CURRENT_DATA", {configurable:false, enumerable:true, writable:false, value:2});
bodavm.toolsFunc.defineProperty(HTMLMediaElement, "HAVE_FUTURE_DATA", {configurable:false, enumerable:true, writable:false, value:3});
bodavm.toolsFunc.defineProperty(HTMLMediaElement, "HAVE_ENOUGH_DATA", {configurable:false, enumerable:true, writable:false, value:4});
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "error", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "src", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "currentSrc", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "crossOrigin", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "networkState", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "preload", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "buffered", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "readyState", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "seeking", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "currentTime", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "duration", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "paused", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "defaultPlaybackRate", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "playbackRate", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "played", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "seekable", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "ended", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "autoplay", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "loop", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "preservesPitch", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "controls", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "controlsList", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "volume", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "muted", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "defaultMuted", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "textTracks", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "webkitAudioDecodedByteCount", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "webkitVideoDecodedByteCount", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "onencrypted", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "onwaitingforkey", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "srcObject", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "NETWORK_EMPTY", {configurable:false, enumerable:true, writable:false, value:0},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "NETWORK_IDLE", {configurable:false, enumerable:true, writable:false, value:1},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "NETWORK_LOADING", {configurable:false, enumerable:true, writable:false, value:2},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "NETWORK_NO_SOURCE", {configurable:false, enumerable:true, writable:false, value:3},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "HAVE_NOTHING", {configurable:false, enumerable:true, writable:false, value:0},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "HAVE_METADATA", {configurable:false, enumerable:true, writable:false, value:1},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "HAVE_CURRENT_DATA", {configurable:false, enumerable:true, writable:false, value:2},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "HAVE_FUTURE_DATA", {configurable:false, enumerable:true, writable:false, value:3},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "HAVE_ENOUGH_DATA", {configurable:false, enumerable:true, writable:false, value:4},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "addTextTrack", {configurable:true, enumerable:true, writable:true, value:function addTextTrack (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "addTextTrack", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "canPlayType", {configurable:true, enumerable:true, writable:true, value:function canPlayType (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "canPlayType", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "captureStream", {configurable:true, enumerable:true, writable:true, value:function captureStream (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "captureStream", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "load", {configurable:true, enumerable:true, writable:true, value:function load (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "load", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "pause", {configurable:true, enumerable:true, writable:true, value:function pause (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "pause", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "play", {configurable:true, enumerable:true, writable:true, value:function play (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "play", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "sinkId", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "remote", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "disableRemotePlayback", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_set", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "setSinkId", {configurable:true, enumerable:true, writable:true, value:function setSinkId (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "setSinkId", arguments)}},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "mediaKeys", {configurable:true, enumerable:true, get:function bodefault (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "bodefault_get", arguments)}, set:undefined},);
bodavm.toolsFunc.defineProperty(HTMLMediaElement.prototype, "setMediaKeys", {configurable:true, enumerable:true, writable:true, value:function setMediaKeys (){return bodavm.toolsFunc.dispatch(this, HTMLMediaElement.prototype, "HTMLMediaElement", "setMediaKeys", arguments)}},);
